"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[5292],{28986:(e,a,r)=>{r.r(a),r.d(a,{data:()=>t});const t={key:"v-74d081f0",path:"/java/oop/oop-interface.html",title:"接口与抽象类",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"接口的基本概念",slug:"接口的基本概念",children:[]},{level:2,title:"抽象类基础",slug:"抽象类基础",children:[]},{level:2,title:"抽象类 VS 接口",slug:"抽象类-vs-接口",children:[]}],filePathRelative:"java/oop/oop-interface.md",git:{updatedTime:1639064924e3,contributors:[{name:"codingoer",email:"codingoer@163.com",commits:1}]}}},36228:(e,a,r)=>{r.r(a),r.d(a,{default:()=>n});const t=(0,r(66252).uE)('<h1 id="接口与抽象类" tabindex="-1"><a class="header-anchor" href="#接口与抽象类" aria-hidden="true">#</a> 接口与抽象类</h1><p><strong>Java不支持多继承，Java类可以实现多个接口</strong></p><h2 id="接口的基本概念" tabindex="-1"><a class="header-anchor" href="#接口的基本概念" aria-hidden="true">#</a> 接口的基本概念</h2><p><strong>接口是对行为的抽象，它是抽象方法的合集，利用接口可以达到对API定义和实现分离的目的。</strong></p><p>接口的职责不限于抽象方法的合集，例如Marker Interface，它的目的就是为了声明某些东西。</p><ul><li>接口不能实例化</li><li>接口不能包含任何非常量成员</li><li>接口要么是抽象方法，要么是静态方法</li></ul><p>Java8新增了函数式编程，即接口中只含有一个抽象方法。另外，<strong>Java8以后，接口也是可以有实现的。</strong></p><h2 id="抽象类基础" tabindex="-1"><a class="header-anchor" href="#抽象类基础" aria-hidden="true">#</a> 抽象类基础</h2><p><strong>抽象类的主要作用是代码重用，抽取相关Java类的公用方法实现或者是共同的成员变量，通过继承的方式达到代码复用的目的。</strong></p><ul><li>抽象类不能实例化</li><li>抽象类可以有一个或者多个抽象方法，也可以没有抽象方法</li></ul><h2 id="抽象类-vs-接口" tabindex="-1"><a class="header-anchor" href="#抽象类-vs-接口" aria-hidden="true">#</a> 抽象类 VS 接口</h2>',11),i={},n=(0,r(83744).Z)(i,[["render",function(e,a){return t}]])},83744:(e,a)=>{a.Z=(e,a)=>{const r=e.__vccOpts||e;for(const[e,t]of a)r[e]=t;return r}}}]);