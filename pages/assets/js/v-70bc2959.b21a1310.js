"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[7032],{49620:(t,e,l)=>{l.r(e),l.d(e,{data:()=>n});const n={key:"v-70bc2959",path:"/algorithm/",title:"算法 - Algorithm",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"算法的定义",slug:"算法的定义",children:[]},{level:2,title:"衡量算法的指标",slug:"衡量算法的指标",children:[]},{level:2,title:"算法的分类",slug:"算法的分类",children:[{level:3,title:"排序算法",slug:"排序算法",children:[]},{level:3,title:"穷举法",slug:"穷举法",children:[]},{level:3,title:"回溯，搜索",slug:"回溯-搜索",children:[]},{level:3,title:"递归分治",slug:"递归分治",children:[]},{level:3,title:"贪心法",slug:"贪心法",children:[]},{level:3,title:"动态规划",slug:"动态规划",children:[]}]}],filePathRelative:"algorithm/README.md",git:{updatedTime:1639064924e3,contributors:[{name:"codingoer",email:"codingoer@163.com",commits:1}]}}},59893:(t,e,l)=>{l.r(e),l.d(e,{default:()=>i});var n=l(66252);const r=(0,n._)("h1",{id:"算法-algorithm",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#算法-algorithm","aria-hidden":"true"},"#"),(0,n.Uk)(" 算法 - Algorithm")],-1),d=(0,n.uE)('<h2 id="算法的定义" tabindex="-1"><a class="header-anchor" href="#算法的定义" aria-hidden="true">#</a> 算法的定义</h2><p>::: theorem 算法的定义 计算机的问题是一个函数，把一定的输入数据映射到相应的输出结果，这个映射的过程就是算法。 :::</p><h2 id="衡量算法的指标" tabindex="-1"><a class="header-anchor" href="#衡量算法的指标" aria-hidden="true">#</a> 衡量算法的指标</h2><ul><li>空间复杂度</li></ul><p>根据算法写成的程序在执行时<strong>占用存储单元的长度</strong>。这个长度往往与输入数据的规模有关。</p><ul><li>时间复杂度</li></ul><p>根据算法写成的程序在执行时<strong>耗费时间的长度</strong>。这个长度往往与输入数据的规模有关。</p><p><strong>不同函数的复杂度</strong></p><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">4</th><th style="text-align:center;">8</th><th style="text-align:center;">16</th><th style="text-align:center;">32</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>1</strong></td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;"><strong>log n</strong></td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td></tr><tr><td style="text-align:center;"><strong>n</strong></td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">4</td><td style="text-align:center;">8</td><td style="text-align:center;">16</td><td style="text-align:center;">32</td></tr><tr><td style="text-align:center;"><strong>n log n</strong></td><td style="text-align:center;">0</td><td style="text-align:center;">2</td><td style="text-align:center;">8</td><td style="text-align:center;">24</td><td style="text-align:center;">64</td><td style="text-align:center;">160</td></tr><tr><td style="text-align:center;"><strong>n²</strong></td><td style="text-align:center;">1</td><td style="text-align:center;">4</td><td style="text-align:center;">16</td><td style="text-align:center;">64</td><td style="text-align:center;">256</td><td style="text-align:center;">1024</td></tr><tr><td style="text-align:center;"><strong>n³</strong></td><td style="text-align:center;">1</td><td style="text-align:center;">8</td><td style="text-align:center;">64</td><td style="text-align:center;">512</td><td style="text-align:center;">4096</td><td style="text-align:center;">32768</td></tr><tr><td style="text-align:center;"><strong>2ⁿ</strong></td><td style="text-align:center;">2</td><td style="text-align:center;">4</td><td style="text-align:center;">16</td><td style="text-align:center;">256</td><td style="text-align:center;">65536</td><td style="text-align:center;">4294967296</td></tr><tr><td style="text-align:center;"><strong>n!</strong></td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">24</td><td style="text-align:center;">40326</td><td style="text-align:center;">....</td><td style="text-align:center;">26313×10³³</td></tr></tbody></table><p><strong>不同函数的增长率</strong></p><p><img src="https://image.hualihai.cn/blog/5ba6d41ec00441388521b0dd4c6e9889" alt="函数增长率"></p><h2 id="算法的分类" tabindex="-1"><a class="header-anchor" href="#算法的分类" aria-hidden="true">#</a> 算法的分类</h2><h3 id="排序算法" tabindex="-1"><a class="header-anchor" href="#排序算法" aria-hidden="true">#</a> 排序算法</h3><ul><li>冒泡排序</li><li>选择排序</li></ul><h3 id="穷举法" tabindex="-1"><a class="header-anchor" href="#穷举法" aria-hidden="true">#</a> 穷举法</h3><h3 id="回溯-搜索" tabindex="-1"><a class="header-anchor" href="#回溯-搜索" aria-hidden="true">#</a> 回溯，搜索</h3><h3 id="递归分治" tabindex="-1"><a class="header-anchor" href="#递归分治" aria-hidden="true">#</a> 递归分治</h3><h3 id="贪心法" tabindex="-1"><a class="header-anchor" href="#贪心法" aria-hidden="true">#</a> 贪心法</h3><h3 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h3><p>https://books.halfrost.com/leetcode/</p>',20),a={},i=(0,l(83744).Z)(a,[["render",function(t,e){const l=(0,n.up)("TOC");return(0,n.wg)(),(0,n.iD)(n.HY,null,[r,(0,n.Wm)(l),d],64)}]])},83744:(t,e)=>{e.Z=(t,e)=>{const l=t.__vccOpts||t;for(const[t,n]of e)l[t]=n;return l}}}]);