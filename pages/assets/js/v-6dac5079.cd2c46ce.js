"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[2744],{47444:(e,l,i)=>{i.r(l),i.d(l,{data:()=>a});const a={key:"v-6dac5079",path:"/java/oop/oop-thinking.html",title:"面向对象的思想",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"面向对象三大特性",slug:"面向对象三大特性",children:[]},{level:2,title:"面向对象五大原则",slug:"面向对象五大原则",children:[]},{level:2,title:"继承是一把双刃剑",slug:"继承是一把双刃剑",children:[]},{level:2,title:"如何正确使用继承",slug:"如何正确使用继承",children:[]}],filePathRelative:"java/oop/oop-thinking.md",git:{updatedTime:1639064924e3,contributors:[{name:"codingoer",email:"codingoer@163.com",commits:1}]}}},52407:(e,l,i)=>{i.r(l),i.d(l,{default:()=>r});const a=(0,i(66252).uE)('<h1 id="面向对象的思想" tabindex="-1"><a class="header-anchor" href="#面向对象的思想" aria-hidden="true">#</a> 面向对象的思想</h1><h2 id="面向对象三大特性" tabindex="-1"><a class="header-anchor" href="#面向对象三大特性" aria-hidden="true">#</a> 面向对象三大特性</h2><ul><li>封装</li></ul><p>封装的目的是隐藏事务内部的实现细节，以便提高安全性和简化编程。</p><ul><li>继承</li></ul><p>继承是代码复用的基础机制，也可以看作是非常紧耦合的一种关系。</p><ul><li>多态</li></ul><p>多态和动态绑定是计算机程序的一种重要思维方式，使得操作对象的程序不需要关注对象的实际类型，从而可以统一处理不同的对象，但又能实现每个对象的特有行为。</p><h2 id="面向对象五大原则" tabindex="-1"><a class="header-anchor" href="#面向对象五大原则" aria-hidden="true">#</a> 面向对象五大原则</h2><p><strong>面向对象S.O.L.I.D原则</strong></p><ul><li><p>单一职责</p></li><li><p>开关原则</p></li><li><p>里式替换</p></li><li><p>接口分离</p></li></ul><p>通过拆分成功能单一的多个接口，将行为进行耦合</p><ul><li>依赖反转</li></ul><p>高层次模块不应该依赖于低层次模块，而是应该基于抽象</p><h2 id="继承是一把双刃剑" tabindex="-1"><a class="header-anchor" href="#继承是一把双刃剑" aria-hidden="true">#</a> 继承是一把双刃剑</h2><p>使用继承的好处</p><ul><li>可以统一处理不同子类型的对象</li></ul><h2 id="如何正确使用继承" tabindex="-1"><a class="header-anchor" href="#如何正确使用继承" aria-hidden="true">#</a> 如何正确使用继承</h2>',18),t={},r=(0,i(83744).Z)(t,[["render",function(e,l){return a}]])},83744:(e,l)=>{l.Z=(e,l)=>{const i=e.__vccOpts||e;for(const[e,a]of l)i[e]=a;return i}}}]);