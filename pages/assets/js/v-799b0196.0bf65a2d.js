"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[4893],{83153:(e,a,t)=>{t.r(a),t.d(a,{data:()=>r});const r={key:"v-799b0196",path:"/java/oop/class/pack.html",title:"常用基础类之包装类",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"缓存值",slug:"缓存值",children:[]},{level:2,title:"原始类型 VS 包装类型",slug:"原始类型-vs-包装类型",children:[]},{level:2,title:"线程安全角度",slug:"线程安全角度",children:[]}],filePathRelative:"java/oop/class/pack.md",git:{updatedTime:1639064924e3,contributors:[{name:"codingoer",email:"codingoer@163.com",commits:1}]}}},8101:(e,a,t)=>{t.r(a),t.d(a,{default:()=>o});const r=(0,t(66252).uE)('<h1 id="常用基础类之包装类" tabindex="-1"><a class="header-anchor" href="#常用基础类之包装类" aria-hidden="true">#</a> 常用基础类之包装类</h1><p><strong>在Java5中引入了自动拆箱和自动装箱功能，自动装箱是Java中的语法糖</strong></p><p>基本数据类型，封装类型的使用注意哪些，封装类型，如果不传值，那么会出现空值。</p><p>boolean值的一些问题，基本类型与封装类型的<code>自动拆箱</code>与<code>自动装箱</code>。</p><h2 id="缓存值" tabindex="-1"><a class="header-anchor" href="#缓存值" aria-hidden="true">#</a> 缓存值</h2><h2 id="原始类型-vs-包装类型" tabindex="-1"><a class="header-anchor" href="#原始类型-vs-包装类型" aria-hidden="true">#</a> 原始类型 VS 包装类型</h2><h2 id="线程安全角度" tabindex="-1"><a class="header-anchor" href="#线程安全角度" aria-hidden="true">#</a> 线程安全角度</h2>',7),d={},o=(0,t(83744).Z)(d,[["render",function(e,a){return r}]])},83744:(e,a)=>{a.Z=(e,a)=>{const t=e.__vccOpts||e;for(const[e,r]of a)t[e]=r;return t}}}]);