"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[8098],{31703:(e,t,a)=>{a.r(t),a.d(t,{data:()=>i});const i={key:"v-d5fe0c96",path:"/design-pattern/",title:"23种设计模式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"设计模式六大原则",slug:"设计模式六大原则",children:[]},{level:2,title:"工厂模式",slug:"工厂模式",children:[]},{level:2,title:"设计模式的分类",slug:"设计模式的分类",children:[]}],filePathRelative:"design-pattern/README.md",git:{updatedTime:1639064924e3,contributors:[{name:"codingoer",email:"codingoer@163.com",commits:1}]}}},40926:(e,t,a)=>{a.r(t),a.d(t,{default:()=>p});var i=a(66252);const n=(0,i.uE)('<h1 id="_23种设计模式" tabindex="-1"><a class="header-anchor" href="#_23种设计模式" aria-hidden="true">#</a> 23种设计模式</h1><h2 id="设计模式六大原则" tabindex="-1"><a class="header-anchor" href="#设计模式六大原则" aria-hidden="true">#</a> 设计模式六大原则</h2><p>单一职责</p><h2 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式" aria-hidden="true">#</a> 工厂模式</h2>',4),l={href:"/java/design-pattern/factory",target:"_blank",rel:"noopener noreferrer"},r=(0,i.Uk)("快去学习吧"),o=(0,i.uE)('<p>参数定义成接口，两个不同的<code>model</code>实现接口，实现简单的适配器模式</p><p>结构型设计模式</p><p>设计模式的分类</p><p>https://www.journaldev.com/1827/java-design-patterns-example-tutorial#factory-pattern https://www.journaldev.com/1392/factory-design-pattern-in-java https://www.gofpatterns.com/creational-design-patterns/creational-patterns/singleton-pattern.php https://www.javatpoint.com/design-patterns-in-java https://sourcemaking.com/refactoring https://medium.com/educative/the-7-most-important-software-design-patterns-d60e546afb0e https://www.journaldev.com/31902/gangs-of-four-gof-design-patterns#creational-design-patterns https://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-examples https://dzone.com/articles/gof-design-patterns-using-java-part-1 https://howtodoinjava.com/gang-of-four-java-design-patterns/ https://www.tutorialspoint.com/design_pattern/design_pattern_overview.htm http://www.blackwasp.co.uk/gofpatterns.aspx https://en.wikipedia.org/wiki/Design_Patterns</p><h2 id="设计模式的分类" tabindex="-1"><a class="header-anchor" href="#设计模式的分类" aria-hidden="true">#</a> 设计模式的分类</h2><ul><li><p>创建型模式</p><ul><li>工厂模式</li><li>单例模式</li><li>构建器模式</li><li>原型模式</li></ul></li><li><p>结构型模式</p><ul><li>桥接模式</li><li>适配器模式</li><li>装饰者模式</li><li>代理模式</li><li>组合模式</li><li>外观模式</li><li>享元模式</li></ul></li><li><p>行为型模式</p><ul><li>策略模式</li><li>解释器模式</li><li>命令模式</li><li>观察者模式</li><li>迭代器模式</li><li>模板方法模式</li><li>访问者模式</li></ul></li></ul>',6),s={},p=(0,a(83744).Z)(s,[["render",function(e,t){const a=(0,i.up)("OutboundLink");return(0,i.wg)(),(0,i.iD)(i.HY,null,[n,(0,i._)("p",null,[(0,i._)("a",l,[r,(0,i.Wm)(a)])]),o],64)}]])},83744:(e,t)=>{t.Z=(e,t)=>{const a=e.__vccOpts||e;for(const[e,i]of t)a[e]=i;return a}}}]);