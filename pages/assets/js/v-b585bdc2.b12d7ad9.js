"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[3992],{81315:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-b585bdc2",path:"/specification/comment.html",title:"注释如何书写",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"类注释",slug:"类注释",children:[]}],filePathRelative:"specification/comment.md",git:{updatedTime:1639064924e3,contributors:[{name:"codingoer",email:"codingoer@163.com",commits:1}]}}},56169:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const e=(0,s(66252).uE)('<h1 id="注释如何书写" tabindex="-1"><a class="header-anchor" href="#注释如何书写" aria-hidden="true">#</a> 注释如何书写</h1><h2 id="类注释" tabindex="-1"><a class="header-anchor" href="#类注释" aria-hidden="true">#</a> 类注释</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * Represents a predicate (boolean-valued function) of one argument.\n *\n * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package-summary.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>functional interface<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n * whose functional method is <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.\n *\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of the input to the predicate\n *\n * <span class="token keyword">@since</span> 1.8\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',3),t={},p=(0,s(83744).Z)(t,[["render",function(n,a){return e}]])},83744:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);