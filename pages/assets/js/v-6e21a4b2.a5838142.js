"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[7591],{63345:(e,o,t)=>{t.r(o),t.d(o,{data:()=>i});const i={key:"v-6e21a4b2",path:"/middleware/zookeeper/",title:"ZooKeeper基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"middleware/zookeeper/README.md",git:{updatedTime:1639064924e3,contributors:[{name:"codingoer",email:"codingoer@163.com",commits:1}]}}},48885:(e,o,t)=>{t.r(o),t.d(o,{default:()=>l});const i=(0,t(66252).uE)('<h1 id="zookeeper基础" tabindex="-1"><a class="header-anchor" href="#zookeeper基础" aria-hidden="true">#</a> ZooKeeper基础</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Zookeeper是一个开源<code>分布式</code>协调服务，分布式数据一致性解决方案。</p></div><p>基于Zookeeper可实现命名服务，集群管理，Master选举，分布式锁。</p><p>应用场景：</p><ul><li>分布式锁</li><li>选举</li><li>组成员管理</li><li>master-worker协同服务（zk的watch机制）</li><li>分布式队列（临时有序节点）</li></ul><p>文件系统数据模型</p><p>znode类型；</p><ul><li>持久性的znode 宕机不会丢失</li><li>临时性的znode 客户端丢了就会释放</li><li>持久循序性的znode</li><li>临时顺序性的znode</li></ul><p>watch机制:关心数据注册watch，不需要客户端不断轮训</p><p>分布式锁：</p><p>避免羊群效应：1号释放锁，2号获得锁，3号watch2号</p><p>注册和发现</p>',12),r={},l=(0,t(83744).Z)(r,[["render",function(e,o){return i}]])},83744:(e,o)=>{o.Z=(e,o)=>{const t=e.__vccOpts||e;for(const[e,i]of o)t[e]=i;return t}}}]);