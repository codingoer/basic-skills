{"version":3,"file":"2831.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;EC3EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,mCAkGI,qBAAuB;;IAlG3B,mCAmGI,qBAAuB;;IAnG3B,mCAwGI,qBAAuB;;IAxG3B,mCAyGI,qBAAuB;;IAzG3B,mCA4GI,qBAAuB;;IA5G3B,mCA6GI,qBAAuB;;IA7G3B,mCAgHI,qBAAuB;;IAhH3B,mCAiHI,qBAAuB;;IAjH3B,mCAoHI,qBAAuB;;IApH3B,mCAqHI,qBAAuB;;IArH3B,mCAgII,qBAAuB;;IAhI3B,mCAiII,qBAAuB;;IAjI3B,mCAsII,qBAAuB;;IAtI3B,mCAuII,qBAAuB;;IAvI3B,mCA0II,qBAAuB;;IA1I3B,mCA2II,qBAAuB;;IA3I3B,mCA8II,qBAAuB;;IA9I3B,mCA+II,qBAAuB;;IA/I3B,mCAkJI,qBAAuB;;IAlJ3B,mCAmJI,qBAAuB;;IAnJ3B,mCAsJI,qBAAuB;;IAtJ3B,mCAuJI,qBAAuB;;IAvJ3B,mCA0JI,qBAAuB;;IA1J3B,mCA2JI,qBAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE3JuD;AAClF;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,yDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/java/programing/function-call.html.js","webpack://notebook/./.temp/pages/java/programing/function-call.html.vue","webpack://notebook/./.temp/pages/java/programing/function-call.html.vue?24e2","webpack://notebook/./.temp/pages/java/programing/function-call.html.vue?0fcf","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-1a4511e3\",\n  \"path\": \"/java/programing/function-call.html\",\n  \"title\": \"Java中函数调用基本原理\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"函数基本概念\",\n      \"slug\": \"函数基本概念\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"参数传递\",\n      \"slug\": \"参数传递\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"理解函数\",\n      \"slug\": \"理解函数\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"函数调用原理\",\n      \"slug\": \"函数调用原理\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"栈的概念\",\n          \"slug\": \"栈的概念\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"函数执行原理 - 基本数据类型\",\n          \"slug\": \"函数执行原理-基本数据类型\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"函数执行原理 - 数组的对象\",\n          \"slug\": \"函数执行原理-数组的对象\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"递归调用原理\",\n          \"slug\": \"递归调用原理\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"children\": []\n        }\n      ]\n    }\n  ],\n  \"filePathRelative\": \"java/programing/function-call.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"java中函数调用基本原理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java中函数调用基本原理\" aria-hidden=\"true\">#</a> Java中函数调用基本原理</h1>\n<p>使用函数来减少重复代码和分解复杂造作。Java中的函数一般叫做方法。</p>\n<p>通过函数来减少重复代码，分解复杂操作是计算机程序的一种重要思维方式。</p>\n<h2 id=\"函数基本概念\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#函数基本概念\" aria-hidden=\"true\">#</a> 函数基本概念</h2>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code>修饰符 返回值类型 函数名称<span class=\"token punctuation\">(</span>参数类型 参数名称<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    操作\n    <span class=\"token keyword\">return</span> 返回值<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><p>函数的组成部分有一下几种：</p>\n<ol>\n<li>修饰符</li>\n<li>返回值，没有返回值则是void</li>\n<li>函数名称</li>\n<li>参数，0个或多个</li>\n<li>操作</li>\n</ol>\n<p><strong>定义函数本身不会执行任何代码，函数要被执行，需要被调用</strong></p>\n<h2 id=\"参数传递\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#参数传递\" aria-hidden=\"true\">#</a> 参数传递</h2>\n<p><strong>参数传递实际上是给参数赋值</strong></p>\n<p>定义函数时声明参数，实际上就是定义变量，只是这些变量的值是未知的，调用函数时传递参数，实际上就是给函数中的变量赋值。</p>\n<p><strong>参数与变量</strong></p>\n<p>A parameter is a variable in a method definition. 参数是一个方法所定义的变量。</p>\n<p>Argument is the actual value of this variable that gets passed to function. 变量是传给方法的实际数据。</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p>其中x, y 为参数</p>\n<p>When a method is called, the arguments are the data you pass into the method's parameters.</p>\n<p>在调用一个方法时，变量是你传给方法所定义的参数的数据。</p>\n<h2 id=\"理解函数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#理解函数\" aria-hidden=\"true\">#</a> 理解函数</h2>\n<ol>\n<li>特殊类型参数数组</li>\n</ol>\n<p>基本类型不会对调用者中的变量造成任何影响，但是数组不是。<strong>在函数内修改数组中的元素会修改调用者中的数据</strong>。</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div></div><p><strong>因为给数组变量赋值不会影响原有的数组内容，只会让数组变量指向一个不同的数组的内容空间。</strong></p>\n<ol start=\"2\">\n<li>可变长度参数</li>\n</ol>\n<p>可变长度参数可以看做是一个数组。</p>\n<p><strong>可变长度参数必须是参数列表中的最后一个，一个函数只能有一个可变长度的参数</strong></p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            max <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><ol start=\"3\">\n<li>理解返回值</li>\n</ol>\n<ul>\n<li>return可以用于函数内的任何地方</li>\n<li>函数返回类型为void也可以使用return</li>\n</ul>\n<ol start=\"4\">\n<li>函数重载</li>\n</ol>\n<p><strong>同一个类中函数名相同但参数不同的现象，一般称为函数重载</strong></p>\n<p>Java编译器会自动寻找最匹配的函数。</p>\n<h2 id=\"函数调用原理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#函数调用原理\" aria-hidden=\"true\">#</a> 函数调用原理</h2>\n<h3 id=\"栈的概念\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#栈的概念\" aria-hidden=\"true\">#</a> 栈的概念</h3>\n<p><strong>栈是一块内存，但它的使用有特别的约定，一般是先进后出</strong>，栈底的内存地址是最高的，栈顶的内存地址是最低的。</p>\n<p>计算机系统主要使用栈来存放函数调用过程中需要的数据：</p>\n<ul>\n<li>参数</li>\n<li>返回地址</li>\n<li>函数内定义的局部变量</li>\n</ul>\n<p><strong>返回值存在一个专门的返回值存储器中！！！</strong></p>\n<h3 id=\"函数执行原理-基本数据类型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#函数执行原理-基本数据类型\" aria-hidden=\"true\">#</a> 函数执行原理 - 基本数据类型</h3>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token class-name\">FunctionExample2</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><ol>\n<li>main函数调用sum函数之前内存</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">地址</th>\n<th style=\"text-align:left\">内存</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0x7FF4</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x7FF8</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x7FFC</td>\n<td style=\"text-align:left\">d</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x8000</td>\n<td style=\"text-align:left\">args</td>\n</tr>\n</tbody>\n</table>\n<p>栈中只存放了两个变量args和d</p>\n<ol start=\"2\">\n<li>执行到sum函数内部，返回之前</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">地址</th>\n<th style=\"text-align:left\">内存</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0x7FEC</td>\n<td style=\"text-align:left\">c(3)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x7FF0</td>\n<td style=\"text-align:left\">main下一条指令地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x7FF4</td>\n<td style=\"text-align:left\">2(b)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x7FF8</td>\n<td style=\"text-align:left\">1(a)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x7FFC</td>\n<td style=\"text-align:left\">d</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x8000</td>\n<td style=\"text-align:left\">args</td>\n</tr>\n</tbody>\n</table>\n<p>调用sum函数时将参数入栈，将返回地址入栈，然后跳转到sum函数内部，为局部变量c分配内存空间。</p>\n<ol start=\"3\">\n<li>\n<p>sum函数返回之前，返回值保存到专门的返回值存储器中。</p>\n</li>\n<li>\n<p>调用return后，程序会跳转到栈中保存的返回地址，也就是main的下一条指令。</p>\n</li>\n<li>\n<p>sum函数的数据会出栈</p>\n</li>\n<li>\n<p>从专门的返回值存储器中获得返回值，赋值给d</p>\n</li>\n</ol>\n<p><strong>函数中的参数和函数内定义的变量，都分配在栈中，这些变量只有在函数调用的时候才分配，在调用结束时就背释放了。</strong></p>\n<h3 id=\"函数执行原理-数组的对象\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#函数执行原理-数组的对象\" aria-hidden=\"true\">#</a> 函数执行原理 - 数组的对象</h3>\n<p><strong>数组和对象类型都有两块内存，一块存放实际内容，一块存放实际内容的地址。</strong></p>\n<p><strong>实际的内容空间不是分配在栈上，而是分配在堆上，存放地址的空间是分配在栈上的。</strong></p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            max <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div></div><p><img src=\"https://image.hualihai.cn/blog/Gal6nS.png\" alt=\"Gal6nS\"></p>\n<p>注意</p>\n<p>当main函数执行结束，栈空间没有变量指向堆空间的数组时，Java系统会自动进行垃圾回收，从而释放这块空间。</p>\n<h3 id=\"递归调用原理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#递归调用原理\" aria-hidden=\"true\">#</a> 递归调用原理</h3>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// print is 24</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div></div><p><img src=\"https://image.hualihai.cn/blog/50zdcv.png\" alt=\"50zdcv\"></p>\n<ol>\n<li>f(0)的返回值1</li>\n<li>f(0)返回到f(1)，f(1)执行1*f(0)，结果是1</li>\n<li>f(1)返回到f(2)，f(2)执行2*f(1)，结果是2</li>\n<li>f(2)返回到f(3)，f(3)执行3*f(2)，结果是6</li>\n<li>f(3)返回到f(4)，f(4)执行4*f(3)，结果是24</li>\n</ol>\n<h3 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\" aria-hidden=\"true\">#</a> 总结</h3>\n<p>函数调用主要是通过栈来存储相关的数据，系统就函数调用者和函数如何使用栈做了约定，返回值是通过一个专门的返回值存储器存储的。</p>\n<p><strong>调用是有成本的，每一次调用都需要分配额外的栈空间用于存储参数，局部变量以及返回值地址，需要进行额外的入栈和出栈操作。</strong></p>\n","export * from \"-!../../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../../node_modules/@vuepress/bundler-webpack/lib/build/ssr/vuepressLoader.js!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./function-call.html.vue?vue&type=template&id=54cf9a0f\"","import { ssrRender } from \"./function-call.html.vue?vue&type=template&id=54cf9a0f\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}