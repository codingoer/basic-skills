{"version":3,"file":"3389.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EClDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAiF;AACjF;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,wDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/java/programing/flow-control.html.js","webpack://notebook/./.temp/pages/java/programing/flow-control.html.vue","webpack://notebook/./.temp/pages/java/programing/flow-control.html.vue?1ce9","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-0da993de\",\n  \"path\": \"/java/programing/flow-control.html\",\n  \"title\": \"Java中的流程控制\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"块作用域\",\n      \"slug\": \"块作用域\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"条件语句\",\n      \"slug\": \"条件语句\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"多重选择语句\",\n      \"slug\": \"多重选择语句\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"循环语句\",\n      \"slug\": \"循环语句\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"终端流程控制语句\",\n      \"slug\": \"终端流程控制语句\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/programing/flow-control.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"java中的流程控制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java中的流程控制\" aria-hidden=\"true\">#</a> Java中的流程控制</h1>\n<p>Java使用条件语句和循环结构确定控制流程。</p>\n<h2 id=\"块作用域\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#块作用域\" aria-hidden=\"true\">#</a> 块作用域</h2>\n<p>由大括号括起来的若干条简单的Java语句。</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">byte</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> d <span class=\"token operator\">=</span> <span class=\"token string\">'刘'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> g <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBinaryString</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div></div><h2 id=\"条件语句\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#条件语句\" aria-hidden=\"true\">#</a> 条件语句</h2>\n<ul>\n<li>建议所有if后面都加括号</li>\n<li>注意if/else的判断顺序</li>\n<li>三元运算符可以使用if/else代替</li>\n</ul>\n<p><strong>if实现原理</strong></p>\n<p><strong>程序最终都是一条条的指令</strong></p>\n<p>CPU有一个指令指示器，指向下一条要执行的指令，CPU根据指令指示器的指示加载指令并执行。</p>\n<p>其中有一些特殊的指令：<strong>跳转指令</strong></p>\n<p><strong>跳转指令</strong>会修改指令器指示器的值，让CPU跳到一个指定的地方执行。跳转有两种：<strong>一种是条件跳转，一种是无条件跳转</strong></p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 其他代码</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n条件跳转：如果a<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>跳转到第<span class=\"token number\">4</span>行\n无条件跳转：跳转到第<span class=\"token number\">7</span>行\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 其他代码</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><h2 id=\"多重选择语句\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#多重选择语句\" aria-hidden=\"true\">#</a> 多重选择语句</h2>\n<ul>\n<li><strong>switch性能更高(使用跳转表)</strong></li>\n<li>可能会出发多个case，一定记得要写break</li>\n</ul>\n<p>switch表达式的类型</p>\n<ul>\n<li>byte</li>\n<li>short</li>\n<li>int</li>\n<li>char</li>\n<li>枚举</li>\n<li>String (Java7支持)</li>\n</ul>\n<p><strong>swith实现原理</strong></p>\n<p>switch的转换和具体系统实现有关。</p>\n<ul>\n<li>如果分支比较少，可能会转换为跳转指令</li>\n<li>如果分支比较多，会使用跳转表</li>\n</ul>\n<p><strong>跳转表</strong></p>\n<p>跳转表是一个映射表，存储了可能的值以及要跳转到的地址。</p>\n<p>跳转表的高效在于，因为其值必须是整数，且按大小顺序排序，可以使用高效的<strong>二分查找</strong>。</p>\n<p>如果值是连续的，跳转表还会优化成数组。</p>\n<p><strong>注意点：</strong></p>\n<ul>\n<li>String用于switch时也会转成整数，通过hashcode转换</li>\n<li>不可以使用long型，因为跳转表值的存储空间为32位</li>\n</ul>\n<p>日常采坑记录：</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> orderService<span class=\"token punctuation\">.</span><span class=\"token function\">findOrderCountByUserId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type <span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token class-name\">OrderStatusType</span><span class=\"token punctuation\">.</span>WAITING_DELIVERED<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"highlight-lines\"><br><br><br><div class=\"highlight-line\">&nbsp;</div><br><br><br></div><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><h2 id=\"循环语句\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#循环语句\" aria-hidden=\"true\">#</a> 循环语句</h2>\n<p>在Java中循环有四种形式：</p>\n<ul>\n<li>while</li>\n<li>do-while</li>\n<li>for</li>\n<li>for-each</li>\n</ul>\n<p><strong>while</strong></p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>条件语句<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    代码块\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><p><strong>do-while</strong></p>\n<p>代码块都会至少执行一次</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    代码块\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>条件语句<span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><p><strong>for</strong></p>\n<p>应用最广泛的循环语法</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>初始化语句<span class=\"token punctuation\">;</span> 循环语句<span class=\"token punctuation\">;</span> 歩进操作<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    循环体\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><p>控制流程如下：</p>\n<ol>\n<li>执行初始化指令</li>\n<li>检查循环条件是否为true，如果为false，则跳转到第6歩</li>\n<li>循环条件为真，执行循环体</li>\n<li>执行步进操作</li>\n<li>步进操作执行完后，跳转第2步，继续检查循环条件</li>\n<li>for循环后面的语句</li>\n</ol>\n<p><strong>死循环</strong></p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><p><strong>for-each</strong></p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><h2 id=\"终端流程控制语句\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#终端流程控制语句\" aria-hidden=\"true\">#</a> 终端流程控制语句</h2>\n<p><strong>break</strong></p>\n<p>break用于提前结束循环。</p>\n<p><strong>带标签的break</strong></p>\n<p>用于跳出多重嵌套循环</p>\n<p><strong>continue</strong></p>\n<p>continue语句会跳过循环体中剩下的代码，然后执行步进操作</p>\n<p><strong>实现原理</strong></p>\n<p>同if原理一样，使用条件转移和无条件转移指令实现。</p>\n","import { ssrRender } from \"./flow-control.html.vue?vue&type=template&id=6e9802a6\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}