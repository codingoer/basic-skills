{"version":3,"file":"2744.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EC5CA;;;;;ACAiF;AACjF;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,wDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/java/oop/oop-thinking.html.js","webpack://notebook/./.temp/pages/java/oop/oop-thinking.html.vue","webpack://notebook/./.temp/pages/java/oop/oop-thinking.html.vue?2314","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-6dac5079\",\n  \"path\": \"/java/oop/oop-thinking.html\",\n  \"title\": \"面向对象的思想\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"面向对象三大特性\",\n      \"slug\": \"面向对象三大特性\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"面向对象五大原则\",\n      \"slug\": \"面向对象五大原则\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"继承是一把双刃剑\",\n      \"slug\": \"继承是一把双刃剑\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"如何正确使用继承\",\n      \"slug\": \"如何正确使用继承\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/oop/oop-thinking.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"面向对象的思想\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#面向对象的思想\" aria-hidden=\"true\">#</a> 面向对象的思想</h1>\n<h2 id=\"面向对象三大特性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#面向对象三大特性\" aria-hidden=\"true\">#</a> 面向对象三大特性</h2>\n<ul>\n<li>封装</li>\n</ul>\n<p>封装的目的是隐藏事务内部的实现细节，以便提高安全性和简化编程。</p>\n<ul>\n<li>继承</li>\n</ul>\n<p>继承是代码复用的基础机制，也可以看作是非常紧耦合的一种关系。</p>\n<ul>\n<li>多态</li>\n</ul>\n<p>多态和动态绑定是计算机程序的一种重要思维方式，使得操作对象的程序不需要关注对象的实际类型，从而可以统一处理不同的对象，但又能实现每个对象的特有行为。</p>\n<h2 id=\"面向对象五大原则\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#面向对象五大原则\" aria-hidden=\"true\">#</a> 面向对象五大原则</h2>\n<p><strong>面向对象S.O.L.I.D原则</strong></p>\n<ul>\n<li>\n<p>单一职责</p>\n</li>\n<li>\n<p>开关原则</p>\n</li>\n<li>\n<p>里式替换</p>\n</li>\n<li>\n<p>接口分离</p>\n</li>\n</ul>\n<p>通过拆分成功能单一的多个接口，将行为进行耦合</p>\n<ul>\n<li>依赖反转</li>\n</ul>\n<p>高层次模块不应该依赖于低层次模块，而是应该基于抽象</p>\n<h2 id=\"继承是一把双刃剑\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#继承是一把双刃剑\" aria-hidden=\"true\">#</a> 继承是一把双刃剑</h2>\n<p>使用继承的好处</p>\n<ul>\n<li>可以统一处理不同子类型的对象</li>\n</ul>\n<h2 id=\"如何正确使用继承\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#如何正确使用继承\" aria-hidden=\"true\">#</a> 如何正确使用继承</h2>\n","import { ssrRender } from \"./oop-thinking.html.vue?vue&type=template&id=8c910e84\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}