{"version":3,"file":"4796.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ECtCA;;;;;ACA0E;AAC1E;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,iDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/database/redis/halou.html.js","webpack://notebook/./.temp/pages/database/redis/halou.html.vue","webpack://notebook/./.temp/pages/database/redis/halou.html.vue?035c","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-0d74c30f\",\n  \"path\": \"/database/redis/halou.html\",\n  \"title\": \"\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"Spring部分\",\n      \"slug\": \"spring部分\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Java集合\",\n      \"slug\": \"java集合\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"类加载\",\n      \"slug\": \"类加载\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"database/redis/halou.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<p>哈喽二面准备</p>\n<p>1.jvm为什么需要分代回收机制？</p>\n<p>它的核心思想是根据对象存活的生命周期将内存划分为若干个不同的区域。一般情况下将堆区划分为老年代（Tenured Generation）和新生代（Young Generation），老年代的特点是每次垃圾收集时只有少量对象需要被回收，而新生代的特点是每次垃圾回收时都有大量的对象需要被回收</p>\n<p>所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。年轻代分三个区。一个Eden区，两个 Survivor区(一般而言)</p>\n<p>https://blog.csdn.net/weixin_38750084/article/details/83317028</p>\n<p>2.自定义类加载器的实际应用有哪些 ？</p>\n<p>https://www.zhihu.com/question/46719811?sort=created</p>\n<p>实现热加载以及热部署。</p>\n<p>3.mysql 索引的类型 ？</p>\n<p>为什么是 B+tree 不是B-tree ？</p>\n<p>hash在哪些场景下用？</p>\n<p>4.覆盖索引有了解过嘛 ？怎么实现的 ？是否需要回表？</p>\n<p>https://www.cnblogs.com/happyflyingpig/p/7662881.html</p>\n<p>5.Redis 底层的selector  模型怎么实现的 ？</p>\n<p>6.CPU怎么调度线程的？中断机制是啥 ？--这个问了我</p>\n<p>7.Redis 集群的类型有哪些 ？各有什么优缺点？</p>\n<p>8.微博大V 发布文章（一亿的粉丝），粉丝的文章列表怎么设计 ？</p>\n<p>9.锁升级过程 ？</p>\n<p>https://www.cnblogs.com/wangwudi/p/12302668.html</p>\n<p>https://www.zhihu.com/question/57794716/answer/606126905</p>\n<p>https://www.cnblogs.com/myseries/p/12213997.html</p>\n<hr>\n<ul>\n<li>\n<p>DDD领域驱动模型设计：</p>\n</li>\n<li>\n<p>CMS垃圾收集器：</p>\n</li>\n</ul>\n<p>CMS是老年代垃圾收集器，在收集过程中可以与用户线程并发操作。它可以与Serial收集器和Parallel New收集器搭配使用。</p>\n<p>https://www.jianshu.com/p/86e358afdf17</p>\n<ul>\n<li>双亲委派</li>\n</ul>\n<p>https://www.jianshu.com/p/1e4011617650</p>\n<p>https://blog.csdn.net/codeyanbao/article/details/82875064</p>\n<p>https://blog.csdn.net/m0_38075425/article/details/81627349</p>\n<ul>\n<li>类加载器</li>\n</ul>\n<p>https://blog.csdn.net/m0_38075425/article/details/81627349</p>\n<ul>\n<li>线程池相关</li>\n</ul>\n<p>https://www.cnblogs.com/zz-ksw/p/12831249.html</p>\n<p>线程池拒绝策略什么时候执行</p>\n<p>线程池参数</p>\n<ul>\n<li>\n<p>MYSQL EXPLAIN执行计划</p>\n</li>\n<li>\n<p>MYSQL 不走索引</p>\n</li>\n<li>\n<p>主键索引和唯一索引的区别</p>\n</li>\n<li>\n<p>索引原理B树</p>\n</li>\n<li>\n<p>MySQL索引类型</p>\n</li>\n<li>\n<p>MySQL InnoDB区别</p>\n</li>\n</ul>\n<p>https://www.zhihu.com/question/20596402</p>\n<ul>\n<li>MYSQL事务</li>\n</ul>\n<p>https://www.cnblogs.com/kismetv/p/10331633.html</p>\n<ul>\n<li>profoBuf的优缺点</li>\n</ul>\n<p>http://qiusuoge.com/16816.html</p>\n<ul>\n<li>\n<p>zk的CAP规则？</p>\n</li>\n<li>\n<p>spring加载bean的过程？</p>\n</li>\n<li>\n<p>spring是如何装载bean的？</p>\n</li>\n<li>\n<p>springBoot启动流程</p>\n</li>\n<li>\n<p>接口幂等性如何处理</p>\n</li>\n<li>\n<p>RocketMQ解决幂等性的问题</p>\n</li>\n</ul>\n<p>https://www.cnblogs.com/chx9832/p/12325871.html</p>\n<ul>\n<li>\n<p>Runable和Thread</p>\n</li>\n<li>\n<p>synchronized</p>\n</li>\n</ul>\n<p>https://www.cnblogs.com/weibanggang/p/9470718.html</p>\n<ul>\n<li>HashMap如何做到线程安全</li>\n</ul>\n<p>https://www.cnblogs.com/shijianchuzhenzhi/p/12904282.html</p>\n<ul>\n<li>ConcurrentHashMap</li>\n</ul>\n<p>https://www.jianshu.com/p/78989cd553b4</p>\n<p>录音：</p>\n<h2 id=\"spring部分\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#spring部分\" aria-hidden=\"true\">#</a> Spring部分</h2>\n<ul>\n<li>\n<p>bean的声明周期</p>\n</li>\n<li>\n<p>bean的初始化流程</p>\n</li>\n<li>\n<p>springBoot的start的是什么？</p>\n</li>\n<li>\n<p>spring的start是怎么加载到Spring的容器当中的。自动装载？？PON中引入依赖就可以了怎么做的</p>\n</li>\n<li>\n<p>SpringBoot启动类的三个注解？</p>\n</li>\n<li>\n<p>@Configuration支持不同场景的配置？ConditionOnClass</p>\n</li>\n</ul>\n<p>SpringBoot的条件注入。。。</p>\n<h2 id=\"java集合\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java集合\" aria-hidden=\"true\">#</a> Java集合</h2>\n<p>jdk1.8</p>\n<p>HashMap的线程不安全体现在哪里？</p>\n<p>hashmap多线程问题？</p>\n<p>hashMap扩容机制？</p>\n<p>链表变成红黑树的机制？？？两个条件：长度是8 + 长度大于64</p>\n<p>通过key怎么计算是放到数组和链表？</p>\n<p>hashMap初始容量是16，扩容16？扩容机制？：数组+链表+红黑树的迁移策略都不一样。</p>\n<p>hashMap的扩容干了什么？</p>\n<h2 id=\"类加载\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#类加载\" aria-hidden=\"true\">#</a> 类加载</h2>\n<p>加载，验证，初始化</p>\n<p>类加载先被哪个类加载？？？？</p>\n<p>GC垃圾回收器</p>\n","import { ssrRender } from \"./halou.html.vue?vue&type=template&id=a5af0918\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}