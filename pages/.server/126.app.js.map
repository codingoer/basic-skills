{"version":3,"file":"126.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ECnBA;;;;;;;;;;;;;;ACA0E;AAC1E;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,iDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/distributed/lock/index.html.js","webpack://notebook/./.temp/pages/distributed/lock/index.html.vue","webpack://notebook/./.temp/pages/distributed/lock/index.html.vue?7dac","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-f52097c2\",\n  \"path\": \"/distributed/lock/\",\n  \"title\": \"\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [],\n  \"filePathRelative\": \"distributed/lock/README.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<p>分布式锁的正确实现方式</p>\n<p>分布式锁可以用在单机上</p>\n<p>使用分布式锁的注意事项：\n加了分布式锁，里面的操作要<code>粒度最小</code>，举个栗子：</p>\n<p>社区发帖功能，社区后台处理发帖逻辑，<code>savePost</code>加上了分布式锁，这时有十个线程同时发帖，在发帖逻辑中有上传图片，图片读写操作，加入<code>savePost</code>方法执行了10秒中，那么最后一个人就要等待<code>100</code>秒中，这样的场景是不太现实的。</p>\n<p>加锁的原则，加锁后里面要有<code>保存的逻辑</code>，错误示例。一个线程获取楼层数为10，另一个线程也获取楼层数为10，导致楼层数相同，无效加锁</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getPostFloor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> topicId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"get-post-floor-\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AutoUnlock</span> autoUnlock <span class=\"token operator\">=</span> <span class=\"token class-name\">LockUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">autoLock</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> topicId<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Topic</span> topic <span class=\"token operator\">=</span> topicService<span class=\"token punctuation\">.</span><span class=\"token function\">findByPropertyAndValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Topic</span><span class=\"token punctuation\">.</span>ID_PROPERTY<span class=\"token punctuation\">,</span> topicId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> topic<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalFloor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidationRuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StatusCode</span><span class=\"token punctuation\">.</span>CLIENT_ERROR_ACCESS_TOO_FREQUENTLY_CODE<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p>加锁放在读写事务外层</p>\n","import { ssrRender } from \"./index.html.vue?vue&type=template&id=9567f306\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}