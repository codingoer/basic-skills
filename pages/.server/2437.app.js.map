{"version":3,"file":"2437.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ECzDA;;;;;;;;;;;;;;;;;;ACAyE;AACzE;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,gDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/database/mysql/lock/lock.html.js","webpack://notebook/./.temp/pages/database/mysql/lock/lock.html.vue","webpack://notebook/./.temp/pages/database/mysql/lock/lock.html.vue?4e5e","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-8486011c\",\n  \"path\": \"/database/mysql/lock/lock.html\",\n  \"title\": \"MySQL中的锁\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"为什么MySQL中使用了锁\",\n      \"slug\": \"为什么mysql中使用了锁\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"锁机制\",\n      \"slug\": \"锁机制\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"MySQL中的锁\",\n      \"slug\": \"mysql中的锁-1\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"悲观锁 - Pessimistic Concurrency Control\",\n          \"slug\": \"悲观锁-pessimistic-concurrency-control\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"乐观锁\",\n          \"slug\": \"乐观锁\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"总结\",\n          \"slug\": \"总结\",\n          \"children\": []\n        }\n      ]\n    }\n  ],\n  \"filePathRelative\": \"database/mysql/lock/lock.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"mysql中的锁\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mysql中的锁\" aria-hidden=\"true\">#</a> MySQL中的锁</h1>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<p>锁是计算机协调多个进程或线程并发访问某一资源的机制</p>\n</div>\n<p>悲观锁 乐观锁 是一种思想。可用在数据库上，Java中，框架中都有</p>\n<p>如何保证数据并发访问的一致性？</p>\n<h2 id=\"为什么mysql中使用了锁\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#为什么mysql中使用了锁\" aria-hidden=\"true\">#</a> 为什么MySQL中使用了锁</h2>\n<h2 id=\"锁机制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#锁机制\" aria-hidden=\"true\">#</a> 锁机制</h2>\n<p>行锁\n表锁\n读锁\n写锁</p>\n<p>悲观锁：操作之前先上锁，悲观锁会影响系统效率吗？\n乐观锁，大多是基于数据版本（ Version ）记录机制实现</p>\n<p>数据库的acid属性</p>\n<h2 id=\"mysql中的锁-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mysql中的锁-1\" aria-hidden=\"true\">#</a> MySQL中的锁</h2>\n<h3 id=\"悲观锁-pessimistic-concurrency-control\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#悲观锁-pessimistic-concurrency-control\" aria-hidden=\"true\">#</a> 悲观锁 - Pessimistic Concurrency Control</h3>\n<p>for update 是悲观锁, 悲观锁是对数据被的修改持悲观态度, 认为数据在被修改的时候一定会存在并发问题.</p>\n<p>悲观锁的实现，往往依靠数据库提供的锁机制。</p>\n<p>for update叫排它锁，是一种<strong>行级锁</strong> 行锁永远是独占方式锁。当一个事务未完成时，其他事务可以读取但是不能写入或更新。</p>\n<div class=\"language-sql ext-sql line-numbers-mode\"><pre v-pre class=\"language-sql\"><code><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">`</span>sys_portal_user_role<span class=\"token punctuation\">`</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><div class=\"language-sql ext-sql line-numbers-mode\"><pre v-pre class=\"language-sql\"><code><span class=\"token comment\">//step1: 查出商品状态</span>\n<span class=\"token keyword\">select</span> quantity <span class=\"token keyword\">from</span> items <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">100</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//step2: 根据商品信息生成订单</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> orders<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>item_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//step3: 修改商品的库存</span>\n<span class=\"token keyword\">update</span> Items <span class=\"token keyword\">set</span> quantity<span class=\"token operator\">=</span>quantity<span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><h3 id=\"乐观锁\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#乐观锁\" aria-hidden=\"true\">#</a> 乐观锁</h3>\n<p>乐观锁（ Optimistic Locking ）相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新时才会对数据的冲突与否进行检测。</p>\n<p>就是 CAS 操作</p>\n<p>类似于Git操作，修改某个文件，只有提交的时候才校验版本。</p>\n<p>使用场景：发生冲突的概率比较低，并发量小</p>\n<p>实现方式：版本号</p>\n<ul>\n<li>\n<p>添加version字段</p>\n</li>\n<li>\n<p>当读取数据时，连同这个 version 字段一起读出</p>\n</li>\n<li>\n<p>数据每更新一次就将此值加一</p>\n</li>\n<li>\n<p>当提交更新时，判断数据库表中对应记录的当前版本号是否与之前取出来的版本号一致，一致则更新</p>\n</li>\n</ul>\n<div class=\"language-sql ext-sql line-numbers-mode\"><pre v-pre class=\"language-sql\"><code><span class=\"token comment\">//step1: 查询出商品信息</span>\n<span class=\"token keyword\">select</span> <span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">,</span>version<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> items <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//step2: 根据商品信息生成订单</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> orders<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>item_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//step3: 修改商品的库存</span>\n<span class=\"token keyword\">update</span> items <span class=\"token keyword\">set</span> quantity<span class=\"token operator\">=</span>quantity<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>version<span class=\"token operator\">=</span>version<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">100</span> <span class=\"token operator\">and</span> version<span class=\"token operator\">=</span><span class=\"token comment\">#{version};</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><h3 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\" aria-hidden=\"true\">#</a> 总结</h3>\n<p>悲观锁\t乐观锁\n概念\t查询时直接锁住记录使得其它事务不能查询，更不能更新\t提交更新时检查版本或者时间戳是否符合\n语法\tselect ... for update\t使用 version 或者 timestamp 进行比较\n实现者\t数据库本身\t开发者\n适用场景\t并发量大\t并发量小\n类比Java\tSynchronized关键字\tCAS 算法</p>\n","import { ssrRender } from \"./lock.html.vue?vue&type=template&id=53e2ebf4\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}