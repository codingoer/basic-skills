{"version":3,"file":"5292.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ECtCA;;;;;ACAkF;AAClF;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,yDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/java/oop/oop-interface.html.js","webpack://notebook/./.temp/pages/java/oop/oop-interface.html.vue","webpack://notebook/./.temp/pages/java/oop/oop-interface.html.vue?438b","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-74d081f0\",\n  \"path\": \"/java/oop/oop-interface.html\",\n  \"title\": \"接口与抽象类\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"接口的基本概念\",\n      \"slug\": \"接口的基本概念\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"抽象类基础\",\n      \"slug\": \"抽象类基础\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"抽象类 VS 接口\",\n      \"slug\": \"抽象类-vs-接口\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/oop/oop-interface.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"接口与抽象类\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#接口与抽象类\" aria-hidden=\"true\">#</a> 接口与抽象类</h1>\n<p><strong>Java不支持多继承，Java类可以实现多个接口</strong></p>\n<h2 id=\"接口的基本概念\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#接口的基本概念\" aria-hidden=\"true\">#</a> 接口的基本概念</h2>\n<p><strong>接口是对行为的抽象，它是抽象方法的合集，利用接口可以达到对API定义和实现分离的目的。</strong></p>\n<p>接口的职责不限于抽象方法的合集，例如Marker Interface，它的目的就是为了声明某些东西。</p>\n<ul>\n<li>接口不能实例化</li>\n<li>接口不能包含任何非常量成员</li>\n<li>接口要么是抽象方法，要么是静态方法</li>\n</ul>\n<p>Java8新增了函数式编程，即接口中只含有一个抽象方法。另外，<strong>Java8以后，接口也是可以有实现的。</strong></p>\n<h2 id=\"抽象类基础\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#抽象类基础\" aria-hidden=\"true\">#</a> 抽象类基础</h2>\n<p><strong>抽象类的主要作用是代码重用，抽取相关Java类的公用方法实现或者是共同的成员变量，通过继承的方式达到代码复用的目的。</strong></p>\n<ul>\n<li>抽象类不能实例化</li>\n<li>抽象类可以有一个或者多个抽象方法，也可以没有抽象方法</li>\n</ul>\n<h2 id=\"抽象类-vs-接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#抽象类-vs-接口\" aria-hidden=\"true\">#</a> 抽象类 VS 接口</h2>\n","import { ssrRender } from \"./oop-interface.html.vue?vue&type=template&id=116db2d7\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}