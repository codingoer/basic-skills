{"version":3,"file":"8848.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EChCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAgF;AAChF;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,uDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/java/collection/generics/generic-jvm.html.js","webpack://notebook/./.temp/pages/java/collection/generics/generic-jvm.html.vue","webpack://notebook/./.temp/pages/java/collection/generics/generic-jvm.html.vue?15da","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-d7b9a5f8\",\n  \"path\": \"/java/collection/generics/generic-jvm.html\",\n  \"title\": \"泛型代码与虚拟机\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"泛型的内部原理\",\n      \"slug\": \"泛型的内部原理\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"类型擦除\",\n      \"slug\": \"类型擦除\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/collection/generics/generic-jvm.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"泛型代码与虚拟机\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#泛型代码与虚拟机\" aria-hidden=\"true\">#</a> 泛型代码与虚拟机</h1>\n<div class=\"custom-container warning\"><p class=\"custom-container-title\">WARNING</p>\n<p>虚拟机没有泛型类型对象，所有的对象都属于普通类。</p>\n</div>\n<h2 id=\"泛型的内部原理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#泛型的内部原理\" aria-hidden=\"true\">#</a> 泛型的内部原理</h2>\n<div class=\"custom-container danger\"><p class=\"custom-container-title\">很重要</p>\n<p>Java泛型是通过<strong>擦除</strong>实现的</p>\n</div>\n<p>Java编译器将Java源代码转换为.class文件，虚拟机加载并运行.class文件。</p>\n<p>Java编译器会将泛型代码转换为普通的非泛型代码，Java虚拟机实际执行的时候，不知道泛型这回事，只知道普通的类及代码。</p>\n<h2 id=\"类型擦除\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#类型擦除\" aria-hidden=\"true\">#</a> 类型擦除</h2>\n<p>在Java中，泛型是通过类型擦除来实现的。类型擦除是Java编译器的概念，Java虚拟机对泛型一无所知。</p>\n<p>泛型类型都自动提供了一个<strong>原始类型（raw type）</strong>，原始类型的名字就是删除<strong>类型参数</strong>后的泛型类型名。</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<p><strong>原始类型</strong>用第一个限定的类型变量来替换，如果没有给定限定就用Object替换。</p>\n</div>\n<p>泛型擦除后的表达式需要进行强制类型转换。</p>\n<div class=\"custom-container danger\"><p class=\"custom-container-title\">注意点</p>\n<p>如果类型参数有多个限定，为了提高效率，应该讲没有方法的接口放在边界列表的末尾。</p>\n</div>\n<p>举个例子：</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Interval</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span> <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> first<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> second<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Interval</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> first<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div></div><p>原始类型Interval</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Interval</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Comparable</span> first<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Comparable</span> second<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Interval</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span> first<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span> second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div></div><p>如果<code>切换限定</code>,</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Interval</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Serializable</span> <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Serializable</span> first<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Serializable</span> second<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Interval</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> first<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 需要做强制类型转换</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div></div>","import { ssrRender } from \"./generic-jvm.html.vue?vue&type=template&id=7650a274\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}