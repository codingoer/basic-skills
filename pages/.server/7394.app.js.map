{"version":3,"file":"7394.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EChCA;;;;;;;;;;;;;;;;;;;;;;;;;ACA0E;AAC1E;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,iDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/java/jdk8/function/index.html.js","webpack://notebook/./.temp/pages/java/jdk8/function/index.html.vue","webpack://notebook/./.temp/pages/java/jdk8/function/index.html.vue?b141","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-30b86b23\",\n  \"path\": \"/java/jdk8/function/\",\n  \"title\": \"Functional Interfaces\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"java.util.function包信息\",\n      \"slug\": \"java-util-function包信息\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"@FunctionalInterface注解说明\",\n      \"slug\": \"functionalinterface注解说明\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/jdk8/function/README.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"functional-interfaces\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#functional-interfaces\" aria-hidden=\"true\">#</a> Functional Interfaces</h1>\n<p>函数式接口是<code>jdk1.8</code>引入的新特性，相关的类都在<code>java.util.function</code>包下面。</p>\n<h2 id=\"java-util-function包信息\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java-util-function包信息\" aria-hidden=\"true\">#</a> java.util.function包信息</h2>\n<p><em>Functional interfaces</em> provide target types for lambda expressions and method references.<br>\nEach functional interface has a single abstract method, called the <em>functional method</em> for that functional interface,\nto which the lambda expression's parameter and return types are matched or adapted.<br>\nFunctional interfaces can provide a target type in multiple contexts, such as assignment context, method invocation, or cast context:</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token comment\">// Assignment context</span>\n<span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Method invocation context</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">// Cast context</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ToIntFunction</span><span class=\"token punctuation\">)</span> e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div></div><p>The interfaces in this package are general purpose functional interfaces used by the JDK, and are available to be used by user code as well.<br>\nWhile they do not identify a complete set of function shapes to which lambda expressions might be adapted, they provide enough to cover common requirements.<br>\nOther functional interfaces provided for specific purposes, such as {@link java.io.FileFilter}, are defined in the packages where they are used.</p>\n<h2 id=\"functionalinterface注解说明\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#functionalinterface注解说明\" aria-hidden=\"true\">#</a> @FunctionalInterface注解说明</h2>\n<p>在<code>java.util.function</code>包下面，所有的类都标记了<code>@FunctionalInterface</code>注解，那么这个注解是干什么的呢？</p>\n<p>被这个注解注释的接口就是<code>函数式接口</code></p>\n<p><code>MCallable</code>被标记成了函数式接口</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MCallable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><p>在使用的时候先定义接口</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">goodsByIdsCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> goodsIds <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Callback</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Goods</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> successCallback<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MCallable</span> afterCallable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p>实现类的写法</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code>goodsService<span class=\"token punctuation\">.</span><span class=\"token function\">goodsByIdsCallback</span><span class=\"token punctuation\">(</span>goodsId<span class=\"token punctuation\">,</span> data <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>lambda表达式<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token operator\">::</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p>@FunctionalInterface标注的方法只能有一个方法，其他都是<code>default</code></p>\n<p>使用函数式接口的列子</p>\n<p>定义接口</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeaderModule</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">headList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fill</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeaderModule</span><span class=\"token punctuation\">></span></span> fill<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p>在lambda表达式中，cid就不能改变了</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeaderModule</span><span class=\"token punctuation\">></span></span> headerModules <span class=\"token operator\">=</span> cpsClassService<span class=\"token punctuation\">.</span><span class=\"token function\">headList</span><span class=\"token punctuation\">(</span>headerModule <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cid <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> cid <span class=\"token operator\">==</span> headerModule<span class=\"token punctuation\">.</span><span class=\"token function\">getParam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        headerModule<span class=\"token punctuation\">.</span><span class=\"token function\">setSelected</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div>","import { ssrRender } from \"./index.html.vue?vue&type=template&id=299fc092\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}