{"version":3,"file":"8985.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EC5CA;;;;;ACAyE;AACzE;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,gDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/distributed/lock/lock.html.js","webpack://notebook/./.temp/pages/distributed/lock/lock.html.vue","webpack://notebook/./.temp/pages/distributed/lock/lock.html.vue?68a5","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-25b97d4f\",\n  \"path\": \"/distributed/lock/lock.html\",\n  \"title\": \"分布式锁\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"和JVM锁的区别\",\n      \"slug\": \"和jvm锁的区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"实现方式\",\n      \"slug\": \"实现方式\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"使用场景\",\n      \"slug\": \"使用场景\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"分布式锁+JVM锁的实现\",\n      \"slug\": \"分布式锁-jvm锁的实现\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"distributed/lock/lock.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"分布式锁\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#分布式锁\" aria-hidden=\"true\">#</a> 分布式锁</h1>\n<div class=\"custom-container warning\"><p class=\"custom-container-title\">WARNING</p>\n<p>分布式锁，是控制分布式系统之间同步访问共享资源的一种方式。在分布式系统中，常常需要协调他们的动作。如果不同的系统或是同一个系统的不同主机之间共享了一个或一组资源，那么访问这些资源的时候，往往需要互斥来防止彼此干扰来保证一致性，在这种情况下，便需要使用到分布式锁。</p>\n</div>\n<p>集群情况下，同一系统不同主机共享一个资源，使用分布式锁</p>\n<h2 id=\"和jvm锁的区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#和jvm锁的区别\" aria-hidden=\"true\">#</a> 和JVM锁的区别</h2>\n<h2 id=\"实现方式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#实现方式\" aria-hidden=\"true\">#</a> 实现方式</h2>\n<h2 id=\"使用场景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用场景\" aria-hidden=\"true\">#</a> 使用场景</h2>\n<h2 id=\"分布式锁-jvm锁的实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#分布式锁-jvm锁的实现\" aria-hidden=\"true\">#</a> 分布式锁+JVM锁的实现</h2>\n","import { ssrRender } from \"./lock.html.vue?vue&type=template&id=67a06c52\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}