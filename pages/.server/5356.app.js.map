{"version":3,"file":"5356.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EC7CA;;;;;;;;;;;;ACAyE;AACzE;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,gDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/java/concurrency/lock.html.js","webpack://notebook/./.temp/pages/java/concurrency/lock.html.vue","webpack://notebook/./.temp/pages/java/concurrency/lock.html.vue?dc07","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-04e1fc9e\",\n  \"path\": \"/java/concurrency/lock.html\",\n  \"title\": \"JVM锁\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"深入理解Syncronized关键字\",\n      \"slug\": \"深入理解syncronized关键字\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Java中的CAS实现原理\",\n      \"slug\": \"java中的cas实现原理\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"JDK中的应用\",\n          \"slug\": \"jdk中的应用\",\n          \"children\": []\n        },\n        {\n          \"level\": 3,\n          \"title\": \"CAS的缺点\",\n          \"slug\": \"cas的缺点\",\n          \"children\": []\n        }\n      ]\n    }\n  ],\n  \"filePathRelative\": \"java/concurrency/lock.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"jvm锁\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#jvm锁\" aria-hidden=\"true\">#</a> JVM锁</h1>\n<div class=\"custom-container warning\"><p class=\"custom-container-title\">WARNING</p>\n<p>单进程，多线程</p>\n</div>\n<p>知道volatile的可能会想到用volatile，使用volatile不会造成阻塞</p>\n<h2 id=\"深入理解syncronized关键字\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#深入理解syncronized关键字\" aria-hidden=\"true\">#</a> 深入理解Syncronized关键字</h2>\n<p>悲观锁就是synchronized</p>\n<p>乐观锁就是原子类（内部使用CAS实现）</p>\n<p>乐观锁是一种思想，即认为读多写少</p>\n<p>CAS是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。</p>\n<p>CAS是乐观锁写那一步操作的一种实现方式罢了</p>\n<h2 id=\"java中的cas实现原理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java中的cas实现原理\" aria-hidden=\"true\">#</a> Java中的CAS实现原理</h2>\n<p>CAS的目的：在多线程中为了保持数据的准确性，避免多个线程同时操作某个变量。</p>\n<p>现在采取的是CAS（Compare And Swap比较和交换）解决了volatile不能保证原子性.</p>\n<p>比较和交换（Conmpare And Swap）是用于实现多线程同步的原子指令。是一种实现并发算法时常用到的技术</p>\n<p>对CAS的理解，CAS是一种无锁算法，CAS有3个操作数，<strong>内存值</strong>V，<strong>旧的预期</strong>值A，要修改的<strong>新值</strong>B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>\n<p>CAS（比较并交换）是CPU指令级的操作.</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">do</span><span class=\"token punctuation\">{</span>\n\n备份旧数据；\n\n基于旧数据构造新数据；\n\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CAS</span><span class=\"token punctuation\">(</span> 内存地址，备份的旧数据，新数据 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><h3 id=\"jdk中的应用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#jdk中的应用\" aria-hidden=\"true\">#</a> JDK中的应用</h3>\n<p>java.util.concurrent.atomic，AtomicInteger，</p>\n<p>AtomicInteger.incrementAndGet的实现用了乐观锁技术。</p>\n<h3 id=\"cas的缺点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cas的缺点\" aria-hidden=\"true\">#</a> CAS的缺点</h3>\n<ul>\n<li>ABA问题</li>\n</ul>\n<p>两个线程，1取内存值然后备份，2取内存值本分，2将值修改为a，然后又修改为b，然后1判断值没有被修改，更新成c.</p>\n","import { ssrRender } from \"./lock.html.vue?vue&type=template&id=a166f7e4\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}