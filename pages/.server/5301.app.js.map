{"version":3,"file":"5301.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EClDA;;;;;;;;;;;;;;;;;;;;;;;;;;ACA0E;AAC1E;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,iDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/java/dynamic/proxy.html.js","webpack://notebook/./.temp/pages/java/dynamic/proxy.html.vue","webpack://notebook/./.temp/pages/java/dynamic/proxy.html.vue?3244","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-186d9622\",\n  \"path\": \"/java/dynamic/proxy.html\",\n  \"title\": \"Java中的代理\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"Java静态代理\",\n      \"slug\": \"java静态代理\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Java动态代理\",\n      \"slug\": \"java动态代理\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"JDK动态代理\",\n      \"slug\": \"jdk动态代理\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"CGLIB动态代理\",\n      \"slug\": \"cglib动态代理\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"JDK VS CGLIB\",\n      \"slug\": \"jdk-vs-cglib\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/dynamic/proxy.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"java中的代理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java中的代理\" aria-hidden=\"true\">#</a> Java中的代理</h1>\n<p>提供了对目标对象的间接访问方式，即通过代理访问目标对象。通过字节码增强对方法进行拦截增强，以便于增加需要的额外处理逻辑</p>\n<p>使用代理的好处：</p>\n<ul>\n<li>\n<p>可以隐藏目标对象的实现</p>\n</li>\n<li>\n<p>可以实现客户与目标对象之间的解耦</p>\n</li>\n</ul>\n<h2 id=\"java静态代理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java静态代理\" aria-hidden=\"true\">#</a> Java静态代理</h2>\n<p>定义接口和接口实现，再定义接口的代理对象，将接口注入到代理对象中，然后通过代理对象去调用真正的实现类。</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StaticService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div></div><div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StaticService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> userName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticServiceProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StaticService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StaticService</span> service <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StaticServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"代理类包装一下\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div></div><p><strong>静态代理只能代理一个类服务，如果需要代理的类很多，就需要大量编写代理类，比较繁琐。</strong></p>\n<h2 id=\"java动态代理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java动态代理\" aria-hidden=\"true\">#</a> Java动态代理</h2>\n<p>https://www.jianshu.com/p/c1bfca9e46bc</p>\n<p>所谓的动态代理就是想办法根据接口或者目标对象计算出代理类的字节码然后加载进JVM中。</p>\n<h2 id=\"jdk动态代理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#jdk动态代理\" aria-hidden=\"true\">#</a> JDK动态代理</h2>\n<p><strong>通过接口实现的动态代理</strong></p>\n<h2 id=\"cglib动态代理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cglib动态代理\" aria-hidden=\"true\">#</a> CGLIB动态代理</h2>\n<p><strong>针对类来实现代理的，当只有类没有接口的时候就需要使用CGLIB动态代理</strong></p>\n<h2 id=\"jdk-vs-cglib\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#jdk-vs-cglib\" aria-hidden=\"true\">#</a> JDK VS CGLIB</h2>\n","import { ssrRender } from \"./proxy.html.vue?vue&type=template&id=433ab084\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}