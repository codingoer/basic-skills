{"version":3,"file":"173.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EChFA;;;;;ACA6E;AAC7E;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,oDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/java/concurrency/glossary.html.js","webpack://notebook/./.temp/pages/java/concurrency/glossary.html.vue","webpack://notebook/./.temp/pages/java/concurrency/glossary.html.vue?d6e1","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-38550f8b\",\n  \"path\": \"/java/concurrency/glossary.html\",\n  \"title\": \"Introduction\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"深入理解并发和并行\",\n      \"slug\": \"深入理解并发和并行\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Parallelism\",\n      \"slug\": \"parallelism\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Concurrency\",\n      \"slug\": \"concurrency\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Parallelism VS Concurrency\",\n      \"slug\": \"parallelism-vs-concurrency\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Physical Cores\",\n      \"slug\": \"physical-cores\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Logical Cores\",\n      \"slug\": \"logical-cores\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Processor\",\n      \"slug\": \"processor\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Core\",\n      \"slug\": \"core\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"CPU\",\n      \"slug\": \"cpu\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"单核CPU多线程有必要吗？\",\n      \"slug\": \"单核cpu多线程有必要吗\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/concurrency/glossary.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"introduction\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction\" aria-hidden=\"true\">#</a> Introduction</h1>\n<p>理解并发之前，先弄懂一些概念</p>\n<h2 id=\"深入理解并发和并行\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#深入理解并发和并行\" aria-hidden=\"true\">#</a> 深入理解并发和并行</h2>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<p>并发和并行都是操作系统中的概念，表示的是CPU执行多个任务的方式</p>\n</div>\n<p>单CPU的计算机，在CPU中同一时间只能做一件事，看起来<code>同时干多件事</code>是通过CPU时间片技术并发完成的。</p>\n<h2 id=\"parallelism\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#parallelism\" aria-hidden=\"true\">#</a> Parallelism</h2>\n<h2 id=\"concurrency\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#concurrency\" aria-hidden=\"true\">#</a> Concurrency</h2>\n<p>并发，在操作系统中是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在<code>同一个处理机</code>上运行的，但任一个时刻点上只有一个程序在处理机上运行。</p>\n<p>并发，指的是多个事情，在同一 <strong>时间段</strong> 内同时发生了。</p>\n<div class=\"custom-container warning\"><p class=\"custom-container-title\">WARNING</p>\n<p>并发的多个任务是互相抢占资源的</p>\n</div>\n<h2 id=\"parallelism-vs-concurrency\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#parallelism-vs-concurrency\" aria-hidden=\"true\">#</a> Parallelism VS Concurrency</h2>\n<p>并行，当系统有<code>一个以上CPU</code>时，当一个CPU执行一个进程，另一个CPU可以执行另一个进程，两个进程互不抢占CPU资源，可以同时进行。\n并行，指的是多个事情，在同一 <strong>时间点</strong> 上同时发生了</p>\n<div class=\"custom-container warning\"><p class=\"custom-container-title\">WARNING</p>\n<p>并行的多个任务之间是不互相抢占资源的</p>\n</div>\n<p>只有在多CPU的情况下，才会发生并行，否则看似并行，其实是并发执行的</p>\n<h2 id=\"physical-cores\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#physical-cores\" aria-hidden=\"true\">#</a> Physical Cores</h2>\n<h2 id=\"logical-cores\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#logical-cores\" aria-hidden=\"true\">#</a> Logical Cores</h2>\n<h2 id=\"processor\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#processor\" aria-hidden=\"true\">#</a> Processor</h2>\n<h2 id=\"core\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#core\" aria-hidden=\"true\">#</a> Core</h2>\n<h2 id=\"cpu\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cpu\" aria-hidden=\"true\">#</a> CPU</h2>\n<p>CPU个数\nCPU核心数\n线程数\nhttps://www.cnblogs.com/kimsimple/p/7787018.html\nhttps://www.cnblogs.com/fubaizhaizhuren/p/7501403.html\nhttps://blog.csdn.net/ohbxiaoxin/article/details/82217498</p>\n<p>Does a new thread in Java run on a different processor core?</p>\n<p>https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/\nhttps://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/</p>\n<p>how processors and threads work？</p>\n<p>https://docs.oracle.com/javase/tutorial/\njava thread and cpu thread</p>\n<h2 id=\"单核cpu多线程有必要吗\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#单核cpu多线程有必要吗\" aria-hidden=\"true\">#</a> 单核CPU多线程有必要吗？</h2>\n<p>通常一个任务不光 cpu 上要花时间， io 上也要花时间（例如去数据库查数据，去抓网页，读写文件等）。 一个进程在等 io 的时候， cpu 是闲置的，另一个进程正好可以利用 cpu 进行计算。 多几个进程一起跑，可以把 io 和 cpu 都跑满了。</p>\n<p>单核CPU使用多线程，同一时间只能一个线程在跑，时间片切换，效率会增加吗？</p>\n<p>一个作业可不总是CPU密集型的，必然穿插着大量的IO调用在其中，所以单核情况下多线程也是可以提高性能的。</p>\n<p>多线程在<code>CPU密集型</code>的作业下的确不能提高性能甚至更浪费时间，但是在<code>IO密集型</code>的作业下则可以提升性能。</p>\n<p>https://zhidao.baidu.com/question/1241346576592987859.html\nhttps://www.oschina.net/question/860036_2142892</p>\n","import { ssrRender } from \"./glossary.html.vue?vue&type=template&id=980e60b0\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}