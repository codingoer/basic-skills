{"version":3,"file":"3280.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ECrEA;;;;;ACA0E;AAC1E;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,iDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/database/index.html.js","webpack://notebook/./.temp/pages/database/index.html.vue","webpack://notebook/./.temp/pages/database/index.html.vue?fbff","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-2e25198a\",\n  \"path\": \"/database/\",\n  \"title\": \"RDBMS\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"适用场景\",\n      \"slug\": \"适用场景\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"相比RDBMS的优点与缺点\",\n      \"slug\": \"相比rdbms的优点与缺点\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"通用特性\",\n      \"slug\": \"通用特性\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"如何正确的选择合适的NoSQL数据库\",\n      \"slug\": \"如何正确的选择合适的nosql数据库\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"数据库选型\",\n      \"slug\": \"数据库选型\",\n      \"children\": [\n        {\n          \"level\": 3,\n          \"title\": \"Elasticsearch + MySQL使用场景\",\n          \"slug\": \"elasticsearch-mysql使用场景\",\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"level\": 2,\n      \"title\": \"MongoDB如何使用\",\n      \"slug\": \"mongodb如何使用\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"Mysql\",\n      \"slug\": \"mysql\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"database/README.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<p>数据库相关</p>\n<h1 id=\"rdbms\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rdbms\" aria-hidden=\"true\">#</a> RDBMS</h1>\n<p>Relation DataBase Management System</p>\n<p>保证数据唯一性，唯一索引</p>\n<h1 id=\"nosql-not-only-sql\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#nosql-not-only-sql\" aria-hidden=\"true\">#</a> NoSQL(Not Only SQL)</h1>\n<p>NoSQL database (called <strong>Not Only SQL</strong> database)</p>\n<p>NOSQL DATABASE TYPE</p>\n<ul>\n<li>Document Databases</li>\n<li>Key-value stores</li>\n</ul>\n<p>2019 Most Popular</p>\n<ul>\n<li>MongoDB</li>\n<li>Cassandra</li>\n<li>Redis</li>\n<li>HBase</li>\n<li>Neo4j</li>\n<li>Amazon DynamoDB</li>\n<li>Memcached</li>\n</ul>\n<h2 id=\"适用场景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#适用场景\" aria-hidden=\"true\">#</a> 适用场景</h2>\n<h2 id=\"相比rdbms的优点与缺点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#相比rdbms的优点与缺点\" aria-hidden=\"true\">#</a> 相比RDBMS的优点与缺点</h2>\n<h2 id=\"通用特性\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#通用特性\" aria-hidden=\"true\">#</a> 通用特性</h2>\n<h2 id=\"如何正确的选择合适的nosql数据库\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#如何正确的选择合适的nosql数据库\" aria-hidden=\"true\">#</a> 如何正确的选择合适的NoSQL数据库</h2>\n<p>达到多少QPS上集群?????</p>\n<h2 id=\"数据库选型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#数据库选型\" aria-hidden=\"true\">#</a> 数据库选型</h2>\n<h3 id=\"elasticsearch-mysql使用场景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#elasticsearch-mysql使用场景\" aria-hidden=\"true\">#</a> Elasticsearch + MySQL使用场景</h3>\n<p>在数据量很大或者需要<code>全文检索</code>，在商品库中使用了<code>MySQL + Canal + Elasticsearch</code></p>\n<blockquote>\n<p>ES不支持事务，要先加一层关系型数据库。在涉及多表操作时无法保证事务的一致性。</p>\n</blockquote>\n<blockquote>\n<p>ES不支持自增(MySQL的累加操作)，涉及这类的操作要先经过MySQL，再做cannal监听同步至ES。</p>\n</blockquote>\n<h2 id=\"mongodb如何使用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mongodb如何使用\" aria-hidden=\"true\">#</a> MongoDB如何使用</h2>\n<p>!&gt; 重要的数据用<code>MySQL</code>，不太重要的数据（丢失一条无所谓的数据，比如日志）</p>\n<ol>\n<li>MongoDB适合存数据量大的数据？那和es相比的好处？</li>\n</ol>\n<h2 id=\"mysql\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mysql\" aria-hidden=\"true\">#</a> Mysql</h2>\n<p>可以使用<code>goodsId</code>作为数据库主键，少一个索引，少占用空间。因为索引是要<code>占用磁盘空间</code>的。</p>\n<p>如何查看磁盘IO使用情况？</p>\n","import { ssrRender } from \"./index.html.vue?vue&type=template&id=2d58b266\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}