{"version":3,"file":"9118.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EChCA;;;;;;;;;ACA0E;AAC1E;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,iDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/java/collection/generics/index.html.js","webpack://notebook/./.temp/pages/java/collection/generics/index.html.vue","webpack://notebook/./.temp/pages/java/collection/generics/index.html.vue?9500","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-53184614\",\n  \"path\": \"/java/collection/generics/\",\n  \"title\": \"泛型程序的设计\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"基本概念\",\n      \"slug\": \"基本概念\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"使用泛型的优点\",\n      \"slug\": \"使用泛型的优点\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/collection/generics/README.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<h1 id=\"泛型程序的设计\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#泛型程序的设计\" aria-hidden=\"true\">#</a> 泛型程序的设计</h1>\n<div class=\"custom-container warning\"><p class=\"custom-container-title\">WARNING</p>\n<p>泛型是在Java5版本加入的</p>\n</div>\n<p><code>泛型</code>是计算机程序中一种重要的思维方式，它将<strong>数据结构和算法与数据类型分离</strong>，使得同一套数据结构和算法能够<strong>应用于各种数据类型</strong>，并可以保证类型安全，提高可读性。</p>\n<h2 id=\"基本概念\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#基本概念\" aria-hidden=\"true\">#</a> 基本概念</h2>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">概念</p>\n<p><code>泛型</code>字面上的意思就是广泛的类型。</p>\n</div>\n<p><code>类，接口，方法</code>可以应用于<code>广泛的类型</code>，代码与操作的数据类型不绑定在一起，同一套代码可以<strong>用于多种数据类型</strong>。这样不仅可以复用代码，降低耦合，而且可以提高代码的可读性和安全性。</p>\n<p>泛型就是类型参数化，处理的数据类型是不固定的，而是可以作为参数传入。</p>\n<h2 id=\"使用泛型的优点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#使用泛型的优点\" aria-hidden=\"true\">#</a> 使用泛型的优点</h2>\n<ul>\n<li>更好的安全性</li>\n<li>更好的可读性</li>\n</ul>\n<p>泛型无法获取他的class类型，不支持以下写法</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ActivityVo</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p>如何解决</p>\n<div class=\"language-java ext-java line-numbers-mode\"><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostImageGoodsList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PostImageGoods</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1900114995537558248L</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><ol>\n<li>\n<p>基本概念</p>\n</li>\n<li>\n<p>泛型的原理jvm</p>\n</li>\n<li>\n<p>泛型类</p>\n</li>\n<li>\n<p>泛型方法</p>\n</li>\n<li>\n<p>泛型接口</p>\n</li>\n<li>\n<p>类型参数的限定与继承</p>\n</li>\n<li>\n<p>通配符类型</p>\n</li>\n<li>\n<p>约束与局限性</p>\n</li>\n<li>\n<p>结合反射使用泛型</p>\n</li>\n<li>\n<p>使用泛型总结</p>\n</li>\n</ol>\n","import { ssrRender } from \"./index.html.vue?vue&type=template&id=676f66c6\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}