{"version":3,"file":"4709.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EC5CA;;;;;;;ACA0E;AAC1E;;AAEA,CAAgH;AAChH,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,iDAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA;AACA","sources":["webpack://notebook/./.temp/pages/java/concurrency/thread/index.html.js","webpack://notebook/./.temp/pages/java/concurrency/thread/index.html.vue","webpack://notebook/./.temp/pages/java/concurrency/thread/index.html.vue?8f83","webpack://notebook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-3250f575\",\n  \"path\": \"/java/concurrency/thread/\",\n  \"title\": \"多线程与CPU之间的关系\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"多线程与单核CPU\",\n      \"slug\": \"多线程与单核cpu\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"最佳线程数\",\n      \"slug\": \"最佳线程数\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"查询CPU内核的利用率\",\n      \"slug\": \"查询cpu内核的利用率\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"查看Linux配置信息\",\n      \"slug\": \"查看linux配置信息\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"java/concurrency/thread/README.md\",\n  \"git\": {\n    \"updatedTime\": 1639064924000,\n    \"contributors\": [\n      {\n        \"name\": \"codingoer\",\n        \"email\": \"codingoer@163.com\",\n        \"commits\": 1\n      }\n    ]\n  }\n}\n","<p>synchronized\nvolatile\nsynchronized vs volatile</p>\n<p>如果创建了固定大小的线程池，比如20个线程，为什么并发执行了10个？难道和机器的性能有关？\nJava程序中创建的线程数量和CPU的关系？</p>\n<p>如何设置线程的数量，根据机器的性能？</p>\n<p>创建了50个线程，他们的执行顺序是如何决定的，不是一起都跑完吗？也是有先后顺序的，谁决定的？</p>\n<p>比如一个接口，假设同时访问量很大，线程是如何处理的？我没有分配线程池</p>\n<h1 id=\"多线程与cpu之间的关系\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#多线程与cpu之间的关系\" aria-hidden=\"true\">#</a> 多线程与CPU之间的关系</h1>\n<p>CPU性能</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">内核数</p>\n<p>内核数是一个硬件术语，它表示单个计算组件（裸芯片或芯片）中的独立中央处理器的数量。</p>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">线程数</p>\n<p>线程或执行线程是一个软件术语，指代那些可由单核 CPU 传递或处理的基本有序指令序列。</p>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">缓存</p>\n<p>CPU高速缓存是处理器上的一个快速记忆区域。</p>\n</div>\n<p>双核四线程：</p>\n<p>双核是处理器有两个核心，利用<code>超线程</code>技术，一个核心就有两个线程。</p>\n<div class=\"custom-container warning\"><p class=\"custom-container-title\">WARNING</p>\n<p>一个核心两个线程，那么这两个线程是同时处理任务的吗？</p>\n</div>\n<p>核相当于<code>公路</code>，双核是两条3米宽的路，四核是4条3米宽的路。</p>\n<p>双核四线程是把两条宽的路又化了两根线，分成四条1.5米的路\n双核四线程是在原有核心基础上虚拟出两个核心，可以让一个核心同时处理两个不一样的任务，一个核心同时做两件事，效率会打折</p>\n<h2 id=\"多线程与单核cpu\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#多线程与单核cpu\" aria-hidden=\"true\">#</a> 多线程与单核CPU</h2>\n<p>顺序执行？？</p>\n<p>四核四线程是就是四条4米宽的路。真正可以同时处理4个任务</p>\n<h2 id=\"最佳线程数\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#最佳线程数\" aria-hidden=\"true\">#</a> 最佳线程数</h2>\n<p>考虑因素\nI/O\nCPU</p>\n<h2 id=\"查询cpu内核的利用率\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查询cpu内核的利用率\" aria-hidden=\"true\">#</a> 查询CPU内核的利用率</h2>\n<h2 id=\"查看linux配置信息\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#查看linux配置信息\" aria-hidden=\"true\">#</a> 查看Linux配置信息</h2>\n<div class=\"language-bash ext-sh line-numbers-mode\"><pre v-pre class=\"language-bash\"><code><span class=\"token function\">cat</span> /proc/cpuinfo <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"core id\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><div class=\"language-bash ext-sh line-numbers-mode\"><pre v-pre class=\"language-bash\"><code><span class=\"token function\">cat</span> /proc/cpuinfo <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"processor\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div>","import { ssrRender } from \"./index.html.vue?vue&type=template&id=2f40ccf5\"\nconst script = {}\n\nimport exportComponent from \"/Users/lionel/VsCodeProjects/notebook/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n"],"names":[],"sourceRoot":""}